{"rules": [{"name": "Person Total Hours", "description": "Total Hours entered is sum of timesheet hours worked", "use_case": "Person", "code": "Rule.sum(derive=Person.total_hours_entered, as_sum_of=Timesheet.hours_worked)", "error": null, "status": "active", "entity": "Person", "id": "01JMCRS3A39N3C6TGVTR9CHV4R"}, {"name": "Person Total Amount Billed", "description": "Total amount billed is total hours entered times billing rate", "use_case": "Person", "code": "Rule.formula(derive=Person.total_amount_billed, as_expression=lambda row: row.total_hours_entered * row.billing_rate)", "error": null, "status": "active", "entity": "Person", "id": "01JMCRS3A54C06M17HXSMN4A29"}, {"name": "Person Billing Rate Constraint", "description": "Billing rate must be greater than 0 and less than 200", "use_case": "Person", "code": "Rule.constraint(validate=Person, as_condition=lambda row: 0 < row.billing_rate < 200, error_msg='Billing rate must be between 0 and 200')", "error": null, "status": "active", "entity": "Person", "id": "01JMCRS3A6WE5S8XH36SS1G6R5"}, {"name": "Timesheet Copy Billing Rate", "description": "Copy billing rate from Person billing rate", "use_case": "Timesheet", "code": "Rule.copy(derive=Timesheet.billing_rate, from_parent=Person.billing_rate)", "error": null, "status": "active", "entity": "Timesheet", "id": "01JMCRS3A6QT4J8MAPTGV3J76B"}, {"name": "Timesheet Total Amount Billed", "description": "If is_billable then total amount billed is billing rate times hours worked", "use_case": "Timesheet", "code": "Rule.formula(derive=Timesheet.total_amount_billed, as_expression=lambda row: row.billing_rate * row.hours_worked if row.is_billable else 0)", "error": null, "status": "active", "entity": "Timesheet", "id": "01JMCRS3A70Z44J4CR9NS12034"}, {"name": "Timesheet Hours Worked Constraint", "description": "Hours worked must be greater than 0 and less than 15", "use_case": "Timesheet", "code": "Rule.constraint(validate=Timesheet, as_condition=lambda row: 0 < row.hours_worked < 15, error_msg='Hours worked must be between 0 and 15')", "error": null, "status": "active", "entity": "Timesheet", "id": "01JMCRS3A8J59C3D0TZGQDWV9C"}, {"name": "Task Total Task Hours Worked", "description": "Total task hours worked is the sum of the Timesheet hours worked", "use_case": "Task", "code": "Rule.sum(derive=Task.total_task_hours_worked, as_sum_of=Timesheet.hours_worked)", "error": null, "status": "active", "entity": "Task", "id": "01JMCRS3A8CDV1X1J36EFTGY52"}, {"name": "Task Total Task Amount Billed", "description": "Total task amount billed is the sum of the Timesheet total amount billed", "use_case": "Task", "code": "Rule.sum(derive=Task.total_task_amount_billed, as_sum_of=Timesheet.total_amount_billed)", "error": null, "status": "active", "entity": "Task", "id": "01JMCRS3A92ZYN64PPWZQYZNVE"}, {"name": "Task Is Over Budget Formula", "description": "Formula: is Over Budget when total task hours worked exceeds task budget hours", "use_case": "Task", "code": "Rule.formula(derive=Task.is_over_budget, as_expression=lambda row: row.total_task_hours_worked > row.task_budget_hours)", "error": null, "status": "active", "entity": "Task", "id": "01JMCRS3A9PK2YGHHPJVY03C5M"}, {"name": "Project Total Project Hours", "description": "Total project hours is the sum of Task total task hours worked", "use_case": "Project", "code": "Rule.sum(derive=Project.total_project_hours, as_sum_of=Task.total_task_hours_worked)", "error": null, "status": "active", "entity": "Project", "id": "01JMCRS3AAC6AR2JVK19T283S0"}, {"name": "Project Total Project Amount", "description": "Total project amount is the sum of Task total amount billed", "use_case": "Project", "code": "Rule.sum(derive=Project.total_project_amount, as_sum_of=Task.total_task_amount_billed)", "error": null, "status": "active", "entity": "Project", "id": "01JMCRS3AA7YW7ZCS54H8P9P94"}, {"name": "Project Is Over Budget Formula", "description": "Formula: is Over Budget when total project amount exceeds project budget amount", "use_case": "Project", "code": "Rule.formula(derive=Project.is_over_budget, as_expression=lambda row: row.total_project_amount > row.project_budget_amount)", "error": null, "status": "active", "entity": "Project", "id": "01JMCRS3AAFVFAR2WHFNJ38PF8"}, {"name": "Client Total Hours", "description": "Total hours is the sum of Project total project hours", "use_case": "Client", "code": "Rule.sum(derive=Client.total_hours, as_sum_of=Project.total_project_hours)", "error": null, "status": "active", "entity": "Client", "id": "01JMCRS3ABD4CABTBM26G3591E"}, {"name": "Client Total Amount", "description": "Total amount is the sum of Project total project amount", "use_case": "Client", "code": "Rule.sum(derive=Client.total_amount, as_sum_of=Project.total_project_amount)", "error": null, "status": "active", "entity": "Client", "id": "01JMCRS3ABMA88DHBGKG90E27K"}, {"name": "Client Is Over Budget Formula", "description": "Formula: is Over Budget equals true when total amount exceeds budget amount", "use_case": "Client", "code": "Rule.formula(derive=Client.is_over_budget, as_expression=lambda row: row.total_amount > row.budget_amount)", "error": null, "status": "active", "entity": "Client", "id": "01JMCRS3ACBS9834HZ180DCME0"}, {"name": "Invoice Invoice Amount", "description": "Invoice Amount is the sum of InvoiceItem task amount", "use_case": "Invoice", "code": "Rule.sum(derive=Invoice.invoice_amount, as_sum_of=InvoiceItem.task_amount)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3ACECESFGBBECAW098X"}, {"name": "Invoice Payment Total", "description": "Payment total is the sum of Payment amount", "use_case": "Invoice", "code": "Rule.sum(derive=Invoice.payment_total, as_sum_of=Payment.amount)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3ADQEK2SXQ2GAJDV5PY"}, {"name": "Invoice Balance Formula", "description": "Invoice balance is invoice amount less payment total", "use_case": "Invoice", "code": "Rule.formula(derive=Invoice.invoice_balance, as_expression=lambda row: row.invoice_amount - row.payment_total)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3AD527KCXQFBHZ2PXNM"}, {"name": "Invoice Is Paid Formula", "description": "Formula: is_paid when invoice balance is than or equal to zero", "use_case": "Invoice", "code": "Rule.formula(derive=Invoice.is_paid, as_expression=lambda row: row.invoice_balance <= 0)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3AE89MRN0YPX0EZJPG5"}, {"name": "Invoice Task Count", "description": "Task Count is count of InvoiceItem", "use_case": "Invoice", "code": "Rule.count(derive=Invoice.task_count, as_count_of=InvoiceItem)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3AE8ZKPXZPHE7PEYQ1F"}, {"name": "Invoice Task Completed Count", "description": "Task completed count is count of InvoiceItem where is_completed is True", "use_case": "Invoice", "code": "Rule.count(derive=Invoice.completed_task_count, as_count_of=InvoiceItem, where=lambda row: row.is_completed == True)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3AFE9QBJBYWYYTTYJ6A"}, {"name": "Invoice Is Ready Formula", "description": "Formula: is ready when Task Count is equal to Task Completed Count", "use_case": "Invoice", "code": "Rule.formula(derive=Invoice.is_ready, as_expression=lambda row: row.task_count == row.completed_task_count)", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3AFDWY5TPA8Z46TM33C"}, {"name": "Invoice Kafka Event", "description": "Send invoice to Kafka when is_ready is True", "use_case": "Invoice", "code": "Rule.after_flush_row_event(on_class=Invoice, calling=kafka_producer.send_row_to_kafka, if_condition=lambda row: row.is_ready, with_args={'topic': 'invoice_ready'})", "error": null, "status": "active", "entity": "Invoice", "id": "01JMCRS3AFZ88WR74F3B52ZHFV"}, {"name": "InvoiceItem Copy Task Amount", "description": "InvoiceItem task amount is copied from Task total task amount billed", "use_case": "InvoiceItem", "code": "Rule.copy(derive=InvoiceItem.task_amount, from_parent=Task.total_task_amount_billed)", "error": null, "status": "active", "entity": "InvoiceItem", "id": "01JMCRS3AGH97HQ0MKGX5MNF3P"}, {"name": "InvoiceItem Is Completed", "description": "InvoiceItem is_completed is sum of Task is_completed when True", "use_case": "InvoiceItem", "code": "Rule.formula(derive=InvoiceItem.is_completed, as_expression=lambda row: all(item.is_completed for item in row.invoice_items))", "error": "Missing Attributes: \n[]\n['InvoiceItem.invoice_items): - formula']\nLogicBank Activation Error", "status": "accepted", "entity": "InvoiceItem", "id": "01JMCRS3AG1NFX5W2M98DJ52EG"}], "models": [{"classname": "Client", "code": "class Client(Base):  # type: ignore\n    \"\"\"\n    description: Represents a client entity in the application.\n    \"\"\"\n    __tablename__ = 'client'\n    _s_collection_name = 'Client'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    phone = Column(String)\n    total_hours : DECIMAL = Column(DECIMAL(10, 2))\n    total_amount : DECIMAL = Column(DECIMAL(10, 2))\n    budget_amount : DECIMAL = Column(DECIMAL(10, 2))\n    is_over_budget = Column(Boolean)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    PersonList : Mapped[List[\"Person\"]] = relationship(back_populates=\"client\")\n    ProjectList : Mapped[List[\"Project\"]] = relationship(back_populates=\"client\")"}, {"classname": "Person", "code": "class Person(Base):  # type: ignore\n    \"\"\"\n    description: Represents a person associated with a client, who logs time and generates billing amounts.\n    \"\"\"\n    __tablename__ = 'person'\n    _s_collection_name = 'Person'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(ForeignKey('client.id'))\n    name = Column(String)\n    email = Column(String)\n    phone = Column(String)\n    billing_rate : DECIMAL = Column(DECIMAL(10, 2))\n    total_hours_entered : DECIMAL = Column(DECIMAL(10, 2))\n    total_amount_billed : DECIMAL = Column(DECIMAL(10, 2))\n\n    # parent relationships (access parent)\n    client : Mapped[\"Client\"] = relationship(back_populates=(\"PersonList\"))\n\n    # child relationships (access children)\n    TimesheetList : Mapped[List[\"Timesheet\"]] = relationship(back_populates=\"person\")"}, {"classname": "Project", "code": "class Project(Base):  # type: ignore\n    \"\"\"\n    description: Represents a project linked to a client.\n    \"\"\"\n    __tablename__ = 'project'\n    _s_collection_name = 'Project'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(ForeignKey('client.id'))\n    name = Column(String)\n    total_project_hours : DECIMAL = Column(DECIMAL(10, 2))\n    total_project_amount : DECIMAL = Column(DECIMAL(10, 2))\n    project_budget_amount : DECIMAL = Column(DECIMAL(10, 2))\n    is_over_budget = Column(Boolean)\n    is_active = Column(Boolean)\n\n    # parent relationships (access parent)\n    client : Mapped[\"Client\"] = relationship(back_populates=(\"ProjectList\"))\n\n    # child relationships (access children)\n    InvoiceList : Mapped[List[\"Invoice\"]] = relationship(back_populates=\"project\")\n    TaskList : Mapped[List[\"Task\"]] = relationship(back_populates=\"project\")"}, {"classname": "Invoice", "code": "class Invoice(Base):  # type: ignore\n    \"\"\"\n    description: Represents an invoice related to a project, tracking financials and approval status.\n    \"\"\"\n    __tablename__ = 'invoice'\n    _s_collection_name = 'Invoice'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    invoice_date = Column(Date)\n    project_id = Column(ForeignKey('project.id'))\n    invoice_amount : DECIMAL = Column(DECIMAL(10, 2))\n    payment_total : DECIMAL = Column(DECIMAL(10, 2))\n    invoice_balance : DECIMAL = Column(DECIMAL(10, 2))\n    is_paid = Column(Boolean)\n    is_ready = Column(Boolean)\n    task_count = Column(Integer)\n    completed_task_count = Column(Integer)\n\n    # parent relationships (access parent)\n    project : Mapped[\"Project\"] = relationship(back_populates=(\"InvoiceList\"))\n\n    # child relationships (access children)\n    InvoiceItemList : Mapped[List[\"InvoiceItem\"]] = relationship(back_populates=\"invoice\")\n    PaymentList : Mapped[List[\"Payment\"]] = relationship(back_populates=\"invoice\")"}, {"classname": "Task", "code": "class Task(Base):  # type: ignore\n    \"\"\"\n    description: Represents a task under a project, measuring progress and budget adherence.\n    \"\"\"\n    __tablename__ = 'task'\n    _s_collection_name = 'Task'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    project_id = Column(ForeignKey('project.id'))\n    name = Column(String)\n    description = Column(String)\n    total_task_hours_worked : DECIMAL = Column(DECIMAL(10, 2))\n    total_task_amount_billed : DECIMAL = Column(DECIMAL(10, 2))\n    task_budget_hours : DECIMAL = Column(DECIMAL(10, 2))\n    is_over_budget = Column(Boolean)\n    is_completed = Column(Boolean)\n\n    # parent relationships (access parent)\n    project : Mapped[\"Project\"] = relationship(back_populates=(\"TaskList\"))\n\n    # child relationships (access children)\n    InvoiceItemList : Mapped[List[\"InvoiceItem\"]] = relationship(back_populates=\"task\")\n    TimesheetList : Mapped[List[\"Timesheet\"]] = relationship(back_populates=\"task\")"}, {"classname": "InvoiceItem", "code": "class InvoiceItem(Base):  # type: ignore\n    \"\"\"\n    description: Represents an individual item in an invoice, which is derived from a task.\n    \"\"\"\n    __tablename__ = 'invoice_item'\n    _s_collection_name = 'InvoiceItem'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    invoice_id = Column(ForeignKey('invoice.id'))\n    task_id = Column(ForeignKey('task.id'))\n    task_amount : DECIMAL = Column(DECIMAL(10, 2))\n    is_completed = Column(Boolean)\n\n    # parent relationships (access parent)\n    invoice : Mapped[\"Invoice\"] = relationship(back_populates=(\"InvoiceItemList\"))\n    task : Mapped[\"Task\"] = relationship(back_populates=(\"InvoiceItemList\"))"}, {"classname": "Payment", "code": "class Payment(Base):  # type: ignore\n    \"\"\"\n    description: Represents a payment made against an invoice, logging the payment amounts and dates.\n    \"\"\"\n    __tablename__ = 'payment'\n    _s_collection_name = 'Payment'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    invoice_id = Column(ForeignKey('invoice.id'))\n    amount : DECIMAL = Column(DECIMAL(10, 2))\n    payment_date = Column(Date)\n    notes = Column(String)\n\n    # parent relationships (access parent)\n    invoice : Mapped[\"Invoice\"] = relationship(back_populates=(\"PaymentList\"))"}, {"classname": "Timesheet", "code": "class Timesheet(Base):  # type: ignore\n    \"\"\"\n    description: Tracks the time worked by a person on a task, used for billing and reporting purposes.\n    \"\"\"\n    __tablename__ = 'timesheet'\n    _s_collection_name = 'Timesheet'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    task_id = Column(ForeignKey('task.id'))\n    person_id = Column(ForeignKey('person.id'))\n    date_worked = Column(Date)\n    hours_worked : DECIMAL = Column(DECIMAL(10, 2))\n    billing_rate : DECIMAL = Column(DECIMAL(10, 2))\n    total_amount_billed : DECIMAL = Column(DECIMAL(10, 2))\n    is_billable = Column(Boolean)\n\n    # parent relationships (access parent)\n    person : Mapped[\"Person\"] = relationship(back_populates=(\"TimesheetList\"))\n    task : Mapped[\"Task\"] = relationship(back_populates=(\"TimesheetList\"))"}]}
