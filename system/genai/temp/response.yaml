"models":
- "classname": |-
    Client
  "code": |-
    class Client(Base):
        __tablename__ = 'client'
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String)
        email = Column(String)
        phone = Column(String)
        total_hours = Column(DECIMAL(10, 2), default=0)
        total_amount = Column(DECIMAL(10, 2), default=0)
        budget_amount = Column(DECIMAL(10, 2))
        is_over_budget = Column(Boolean, default=False)

        projects = relationship('Project', backref='client')
  "description": |-
    Represents a client entity in the application.
  "name": |-
    client
- "classname": |-
    Project
  "code": |-
    class Project(Base):
        __tablename__ = 'project'
        id = Column(Integer, primary_key=True, autoincrement=True)
        client_id = Column(Integer, ForeignKey('client.id'))
        name = Column(String)
        total_project_hours = Column(DECIMAL(10, 2), default=0)
        total_project_amount = Column(DECIMAL(10, 2), default=0)
        project_budget_amount = Column(DECIMAL(10, 2))
        is_over_budget = Column(Boolean, default=False)
        is_active = Column(Boolean, default=True)

        tasks = relationship('Task', backref='project')
        invoices = relationship('Invoice', backref='project')
  "description": |-
    Represents a project linked to a client.
  "name": |-
    project
- "classname": |-
    Invoice
  "code": |-
    class Invoice(Base):
        __tablename__ = 'invoice'
        id = Column(Integer, primary_key=True, autoincrement=True)
        invoice_date = Column(Date)
        project_id = Column(Integer, ForeignKey('project.id'))
        invoice_amount = Column(DECIMAL(10, 2), default=0)
        payment_total = Column(DECIMAL(10, 2), default=0)
        invoice_balance = Column(DECIMAL(10, 2))
        is_paid = Column(Boolean, default=False)
        is_ready = Column(Boolean, default=False)
        task_count = Column(Integer, default=0)
        completed_task_count = Column(Integer, default=0)

        invoice_items = relationship('InvoiceItem', backref='invoice')
        payments = relationship('Payment', backref='invoice')
  "description": |-
    Represents an invoice related to a project, tracking financials and approval status.
  "name": |-
    invoice
- "classname": |-
    InvoiceItem
  "code": |-
    class InvoiceItem(Base):
        __tablename__ = 'invoice_item'
        id = Column(Integer, primary_key=True, autoincrement=True)
        invoice_id = Column(Integer, ForeignKey('invoice.id'))
        task_id = Column(Integer, ForeignKey('task.id'))
        task_amount = Column(DECIMAL(10, 2), default=0)
        is_completed = Column(Boolean, default=False)
  "description": |-
    Represents an individual item in an invoice, which is derived from a task.
  "name": |-
    invoice_item
- "classname": |-
    Task
  "code": |-
    class Task(Base):
        __tablename__ = 'task'
        id = Column(Integer, primary_key=True, autoincrement=True)
        project_id = Column(Integer, ForeignKey('project.id'))
        name = Column(String)
        description = Column(String)
        total_task_hours_worked = Column(DECIMAL(10, 2), default=0)
        total_task_amount_billed = Column(DECIMAL(10, 2), default=0)
        task_budget_hours = Column(DECIMAL(10, 2))
        is_over_budget = Column(Boolean, default=False)
        is_completed = Column(Boolean, default=False)

        timesheets = relationship('Timesheet', backref='task')
        invoice_items = relationship('InvoiceItem', backref='task')
  "description": |-
    Represents a task under a project, measuring progress and budget adherence.
  "name": |-
    task
- "classname": |-
    Person
  "code": |-
    class Person(Base):
        __tablename__ = 'person'
        id = Column(Integer, primary_key=True, autoincrement=True)
        client_id = Column(Integer, ForeignKey('client.id'))
        name = Column(String)
        email = Column(String)
        phone = Column(String)
        billing_rate = Column(DECIMAL(10, 2), default=0)
        total_hours_entered = Column(DECIMAL(10, 2), default=0)
        total_amount_billed = Column(DECIMAL(10, 2), default=0)

        timesheets = relationship('Timesheet', backref='person')
  "description": |-
    Represents a person associated with a client, who logs time and generates billing amounts.
  "name": |-
    person
- "classname": |-
    Timesheet
  "code": |-
    class Timesheet(Base):
        __tablename__ = 'timesheet'
        id = Column(Integer, primary_key=True, autoincrement=True)
        task_id = Column(Integer, ForeignKey('task.id'))
        person_id = Column(Integer, ForeignKey('person.id'))
        date_worked = Column(Date)
        hours_worked = Column(DECIMAL(10, 2), default=0)
        billing_rate = Column(DECIMAL(10, 2), default=0)
        total_amount_billed = Column(DECIMAL(10, 2), default=0)
        is_billable = Column(Boolean, default=False)
  "description": |-
    Tracks the time worked by a person on a task, used for billing and reporting purposes.
  "name": |-
    timesheet
- "classname": |-
    Payment
  "code": |-
    class Payment(Base):
        __tablename__ = 'payment'
        id = Column(Integer, primary_key=True, autoincrement=True)
        invoice_id = Column(Integer, ForeignKey('invoice.id'))
        amount = Column(DECIMAL(10, 2), default=0)
        payment_date = Column(Date)
        notes = Column(String)
  "description": |-
    Represents a payment made against an invoice, logging the payment amounts and dates.
  "name": |-
    payment
"name": |-
  ProjectTracker
"rules":
- "code": |-
    Rule.sum(derive=Person.total_hours_entered, as_sum_of=Timesheet.hours_worked)
  "description": |-
    Total Hours entered is sum of timesheet hours worked
  "entity": |-
    Person
  "name": |-
    Person Total Hours
  "use_case": |-
    Person
- "code": |-
    Rule.formula(derive=Person.total_amount_billed, as_expression=lambda row: row.total_hours_entered * row.billing_rate)
  "description": |-
    Total amount billed is total hours entered times billing rate
  "entity": |-
    Person
  "name": |-
    Person Total Amount Billed
  "use_case": |-
    Person
- "code": |-
    Rule.constraint(validate=Person, as_condition=lambda row: 0 < row.billing_rate < 200, error_msg='Billing rate must be between 0 and 200')
  "description": |-
    Billing rate must be greater than 0 and less than 200
  "entity": |-
    Person
  "name": |-
    Person Billing Rate Constraint
  "use_case": |-
    Person
- "code": |-
    Rule.copy(derive=Timesheet.billing_rate, from_parent=Person.billing_rate)
  "description": |-
    Copy billing rate from Person billing rate
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Copy Billing Rate
  "use_case": |-
    Timesheet
- "code": |-
    Rule.formula(derive=Timesheet.total_amount_billed, as_expression=lambda row: row.billing_rate * row.hours_worked if row.is_billable else 0)
  "description": |-
    If is_billable then total amount billed is billing rate times hours worked
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Total Amount Billed
  "use_case": |-
    Timesheet
- "code": |-
    Rule.constraint(validate=Timesheet, as_condition=lambda row: 0 < row.hours_worked < 15, error_msg='Hours worked must be between 0 and 15')
  "description": |-
    Hours worked must be greater than 0 and less than 15
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Hours Worked Constraint
  "use_case": |-
    Timesheet
- "code": |-
    Rule.sum(derive=Task.total_task_hours_worked, as_sum_of=Timesheet.hours_worked)
  "description": |-
    Total task hours worked is the sum of the Timesheet hours worked
  "entity": |-
    Task
  "name": |-
    Task Total Task Hours Worked
  "use_case": |-
    Task
- "code": |-
    Rule.sum(derive=Task.total_task_amount_billed, as_sum_of=Timesheet.total_amount_billed)
  "description": |-
    Total task amount billed is the sum of the Timesheet total amount billed
  "entity": |-
    Task
  "name": |-
    Task Total Task Amount Billed
  "use_case": |-
    Task
- "code": |-
    Rule.formula(derive=Task.is_over_budget, as_expression=lambda row: row.total_task_hours_worked > row.task_budget_hours)
  "description": |-
    Formula: is Over Budget when total task hours worked exceeds task budget hours
  "entity": |-
    Task
  "name": |-
    Task Is Over Budget Formula
  "use_case": |-
    Task
- "code": |-
    Rule.sum(derive=Project.total_project_hours, as_sum_of=Task.total_task_hours_worked)
  "description": |-
    Total project hours is the sum of Task total task hours worked
  "entity": |-
    Project
  "name": |-
    Project Total Project Hours
  "use_case": |-
    Project
- "code": |-
    Rule.sum(derive=Project.total_project_amount, as_sum_of=Task.total_task_amount_billed)
  "description": |-
    Total project amount is the sum of Task total amount billed
  "entity": |-
    Project
  "name": |-
    Project Total Project Amount
  "use_case": |-
    Project
- "code": |-
    Rule.formula(derive=Project.is_over_budget, as_expression=lambda row: row.total_project_amount > row.project_budget_amount)
  "description": |-
    Formula: is Over Budget when total project amount exceeds project budget amount
  "entity": |-
    Project
  "name": |-
    Project Is Over Budget Formula
  "use_case": |-
    Project
- "code": |-
    Rule.sum(derive=Client.total_hours, as_sum_of=Project.total_project_hours)
  "description": |-
    Total hours is the sum of Project total project hours
  "entity": |-
    Client
  "name": |-
    Client Total Hours
  "use_case": |-
    Client
- "code": |-
    Rule.sum(derive=Client.total_amount, as_sum_of=Project.total_project_amount)
  "description": |-
    Total amount is the sum of Project total project amount
  "entity": |-
    Client
  "name": |-
    Client Total Amount
  "use_case": |-
    Client
- "code": |-
    Rule.formula(derive=Client.is_over_budget, as_expression=lambda row: row.total_amount > row.budget_amount)
  "description": |-
    Formula: is Over Budget equals true when total amount exceeds budget amount
  "entity": |-
    Client
  "name": |-
    Client Is Over Budget Formula
  "use_case": |-
    Client
- "code": |-
    Rule.sum(derive=Invoice.invoice_amount, as_sum_of=InvoiceItem.task_amount)
  "description": |-
    Invoice Amount is the sum of InvoiceItem task amount
  "entity": |-
    Invoice
  "name": |-
    Invoice Invoice Amount
  "use_case": |-
    Invoice
- "code": |-
    Rule.sum(derive=Invoice.payment_total, as_sum_of=Payment.amount)
  "description": |-
    Payment total is the sum of Payment amount
  "entity": |-
    Invoice
  "name": |-
    Invoice Payment Total
  "use_case": |-
    Invoice
- "code": |-
    Rule.formula(derive=Invoice.invoice_balance, as_expression=lambda row: row.invoice_amount - row.payment_total)
  "description": |-
    Invoice balance is invoice amount less payment total
  "entity": |-
    Invoice
  "name": |-
    Invoice Balance Formula
  "use_case": |-
    Invoice
- "code": |-
    Rule.formula(derive=Invoice.is_paid, as_expression=lambda row: row.invoice_balance <= 0)
  "description": |-
    Formula: is_paid when invoice balance is than or equal to zero
  "entity": |-
    Invoice
  "name": |-
    Invoice Is Paid Formula
  "use_case": |-
    Invoice
- "code": |-
    Rule.count(derive=Invoice.task_count, as_count_of=InvoiceItem)
  "description": |-
    Task Count is count of InvoiceItem
  "entity": |-
    Invoice
  "name": |-
    Invoice Task Count
  "use_case": |-
    Invoice
- "code": |-
    Rule.count(derive=Invoice.completed_task_count, as_count_of=InvoiceItem, where=lambda row: row.is_completed == True)
  "description": |-
    Task completed count is count of InvoiceItem where is_completed is True
  "entity": |-
    Invoice
  "name": |-
    Invoice Task Completed Count
  "use_case": |-
    Invoice
- "code": |-
    Rule.formula(derive=Invoice.is_ready, as_expression=lambda row: row.task_count == row.completed_task_count)
  "description": |-
    Formula: is ready when Task Count is equal to Task Completed Count
  "entity": |-
    Invoice
  "name": |-
    Invoice Is Ready Formula
  "use_case": |-
    Invoice
- "code": |-
    Rule.after_flush_row_event(on_class=Invoice, calling=kafka_producer.send_row_to_kafka, if_condition=lambda row: row.is_ready, with_args={'topic': 'invoice_ready'})
  "description": |-
    Send invoice to Kafka when is_ready is True
  "entity": |-
    Invoice
  "name": |-
    Invoice Kafka Event
  "use_case": |-
    Invoice
- "code": |-
    Rule.copy(derive=InvoiceItem.task_amount, from_parent=Task.total_task_amount_billed)
  "description": |-
    InvoiceItem task amount is copied from Task total task amount billed
  "entity": |-
    InvoiceItem
  "name": |-
    InvoiceItem Copy Task Amount
  "use_case": |-
    InvoiceItem
- "code": |-
    Rule.formula(derive=InvoiceItem.is_completed, as_expression=lambda row: all(item.is_completed for item in row.invoice_items))
  "description": |-
    InvoiceItem is_completed is sum of Task is_completed when True
  "entity": |-
    InvoiceItem
  "name": |-
    InvoiceItem Is Completed
  "use_case": |-
    InvoiceItem
"test_data": |-
  # Test data for Client
  test_client_1 = Client(name="Client A", email="clienta@example.com", phone="123-456-7890", total_hours=100.00, total_amount=2000.00, budget_amount=3000.00, is_over_budget=False)
  test_client_2 = Client(name="Client B", email="clientb@example.com", phone="234-567-8901", total_hours=150.00, total_amount=3000.00, budget_amount=3000.00, is_over_budget=False)
  test_client_3 = Client(name="Client C", email="clientc@example.com", phone="345-678-9012", total_hours=120.00, total_amount=3500.00, budget_amount=3000.00, is_over_budget=True)
  test_client_4 = Client(name="Client D", email="clientd@example.com", phone="456-789-0123", total_hours=50.00, total_amount=1000.00, budget_amount=2000.00, is_over_budget=False)

  # Test data for Project
  test_project_1 = Project(client_id=1, name="Project X", total_project_hours=80.00, total_project_amount=1600.00, project_budget_amount=2000.00, is_over_budget=False, is_active=True)
  test_project_2 = Project(client_id=2, name="Project Y", total_project_hours=90.00, total_project_amount=1800.00, project_budget_amount=2000.00, is_over_budget=False, is_active=True)
  test_project_3 = Project(client_id=3, name="Project Z", total_project_hours=60.00, total_project_amount=2000.00, project_budget_amount=1800.00, is_over_budget=True, is_active=True)
  test_project_4 = Project(client_id=4, name="Project W", total_project_hours=30.00, total_project_amount=600.00, project_budget_amount=1000.00, is_over_budget=False, is_active=True)

  # Test data for Invoice
  test_invoice_1 = Invoice(invoice_date=date(2023, 6, 1), project_id=1, invoice_amount=400.00, payment_total=200.00, invoice_balance=200.00, is_paid=False, is_ready=False, task_count=2, completed_task_count=1)
  test_invoice_2 = Invoice(invoice_date=date(2023, 6, 5), project_id=2, invoice_amount=500.00, payment_total=500.00, invoice_balance=0.00, is_paid=True, is_ready=True, task_count=3, completed_task_count=3)
  test_invoice_3 = Invoice(invoice_date=date(2023, 6, 10), project_id=3, invoice_amount=400.00, payment_total=100.00, invoice_balance=300.00, is_paid=False, is_ready=False, task_count=1, completed_task_count=0)
  test_invoice_4 = Invoice(invoice_date=date(2023, 6, 15), project_id=4, invoice_amount=200.00, payment_total=200.00, invoice_balance=0.00, is_paid=True, is_ready=True, task_count=2, completed_task_count=2)
"test_data_rows":
- "code": |-
    test_client_1 = Client(name="Client A", email="clienta@example.com", phone="123-456-7890", total_hours=100.00, total_amount=2000.00, budget_amount=3000.00, is_over_budget=False)
  "test_data_row_variable": |-
    test_client_1
- "code": |-
    test_client_2 = Client(name="Client B", email="clientb@example.com", phone="234-567-8901", total_hours=150.00, total_amount=3000.00, budget_amount=3000.00, is_over_budget=False)
  "test_data_row_variable": |-
    test_client_2
- "code": |-
    test_client_3 = Client(name="Client C", email="clientc@example.com", phone="345-678-9012", total_hours=120.00, total_amount=3500.00, budget_amount=3000.00, is_over_budget=True)
  "test_data_row_variable": |-
    test_client_3
- "code": |-
    test_client_4 = Client(name="Client D", email="clientd@example.com", phone="456-789-0123", total_hours=50.00, total_amount=1000.00, budget_amount=2000.00, is_over_budget=False)
  "test_data_row_variable": |-
    test_client_4
- "code": |-
    test_project_1 = Project(client_id=1, name="Project X", total_project_hours=80.00, total_project_amount=1600.00, project_budget_amount=2000.00, is_over_budget=False, is_active=True)
  "test_data_row_variable": |-
    test_project_1
- "code": |-
    test_project_2 = Project(client_id=2, name="Project Y", total_project_hours=90.00, total_project_amount=1800.00, project_budget_amount=2000.00, is_over_budget=False, is_active=True)
  "test_data_row_variable": |-
    test_project_2
- "code": |-
    test_project_3 = Project(client_id=3, name="Project Z", total_project_hours=60.00, total_project_amount=2000.00, project_budget_amount=1800.00, is_over_budget=True, is_active=True)
  "test_data_row_variable": |-
    test_project_3
- "code": |-
    test_project_4 = Project(client_id=4, name="Project W", total_project_hours=30.00, total_project_amount=600.00, project_budget_amount=1000.00, is_over_budget=False, is_active=True)
  "test_data_row_variable": |-
    test_project_4
- "code": |-
    test_invoice_1 = Invoice(invoice_date=date(2023, 6, 1), project_id=1, invoice_amount=400.00, payment_total=200.00, invoice_balance=200.00, is_paid=False, is_ready=False, task_count=2, completed_task_count=1)
  "test_data_row_variable": |-
    test_invoice_1
- "code": |-
    test_invoice_2 = Invoice(invoice_date=date(2023, 6, 5), project_id=2, invoice_amount=500.00, payment_total=500.00, invoice_balance=0.00, is_paid=True, is_ready=True, task_count=3, completed_task_count=3)
  "test_data_row_variable": |-
    test_invoice_2
- "code": |-
    test_invoice_3 = Invoice(invoice_date=date(2023, 6, 10), project_id=3, invoice_amount=400.00, payment_total=100.00, invoice_balance=300.00, is_paid=False, is_ready=False, task_count=1, completed_task_count=0)
  "test_data_row_variable": |-
    test_invoice_3
- "code": |-
    test_invoice_4 = Invoice(invoice_date=date(2023, 6, 15), project_id=4, invoice_amount=200.00, payment_total=200.00, invoice_balance=0.00, is_paid=True, is_ready=True, task_count=2, completed_task_count=2)
  "test_data_row_variable": |-
    test_invoice_4
"test_data_sqlite": |-
  INSERT INTO client (name, email, phone, total_hours, total_amount, budget_amount, is_over_budget) VALUES
  ("Client A", "clienta@example.com", "123-456-7890", 100.00, 2000.00, 3000.00, False),
  ("Client B", "clientb@example.com", "234-567-8901", 150.00, 3000.00, 3000.00, False),
  ("Client C", "clientc@example.com", "345-678-9012", 120.00, 3500.00, 3000.00, True),
  ("Client D", "clientd@example.com", "456-789-0123", 50.00, 1000.00, 2000.00, False);
